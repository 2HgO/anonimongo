Administration Commands	anonimongo/dbops/admmgmt.html#administration-commands	 Administration Commands	
create	anonimongo/dbops/admmgmt.html#create,Database,string,tuple of (bool, int, int),string,string,string	admmgmt: create(db: Database; name: string; capsizemax = (false, 0, 0);\n       storageEngine = bsonNull(); validator = bsonNull(); validationLevel = &quot;strict&quot;;\n       validationAction = &quot;error&quot;; indexOptionDefaults = bsonNull(); viewOn = &quot;&quot;;\n       pipeline = bsonArray(); collation = bsonNull(); writeConcern = bsonNull()): Future[\n    (bool, string)]	
createIndexes	anonimongo/dbops/admmgmt.html#createIndexes,Database,string,BsonBase	admmgmt: createIndexes(db: Database; coll: string; indexes: BsonBase; writeConcern = bsonNull()): Future[\n    (bool, string)]	
dropCollection	anonimongo/dbops/admmgmt.html#dropCollection,Database,string	admmgmt: dropCollection(db: Database; coll: string; wt = bsonNull()): Future[(bool, string)]	
dropDatabase	anonimongo/dbops/admmgmt.html#dropDatabase,Database	admmgmt: dropDatabase(db: Database; wt = bsonNull()): Future[(bool, string)]	
dropIndexes	anonimongo/dbops/admmgmt.html#dropIndexes,Database,string,BsonBase	admmgmt: dropIndexes(db: Database; coll: string; indexes: BsonBase; wt = bsonNull()): Future[\n    (bool, string)]	
listCollections	anonimongo/dbops/admmgmt.html#listCollections,Database,string	admmgmt: listCollections(db: Database; dbname = &quot;&quot;; filter = bsonNull()): Future[seq[BsonBase]]	
listCollectionNames	anonimongo/dbops/admmgmt.html#listCollectionNames,Database,string	admmgmt: listCollectionNames(db: Database; dbname = &quot;&quot;): Future[seq[string]]	
listDatabases	anonimongo/dbops/admmgmt.html#listDatabases	admmgmt: listDatabases(db: Mongo | Database): Future[seq[BsonBase]]	
listDatabaseNames	anonimongo/dbops/admmgmt.html#listDatabaseNames	admmgmt: listDatabaseNames(db: Mongo | Database): Future[seq[string]]	
listIndexes	anonimongo/dbops/admmgmt.html#listIndexes,Database,string	admmgmt: listIndexes(db: Database; coll: string): Future[seq[BsonBase]]	
renameCollection	anonimongo/dbops/admmgmt.html#renameCollection,Database,string,string	admmgmt: renameCollection(db: Database; `from`, to: string; wt = bsonNull()): Future[\n    (bool, string)]	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,,int	admmgmt: shutdown(db: Mongo | Database; force = false; timeout = 0): Future[(bool, string)]	
currentOp	anonimongo/dbops/admmgmt.html#currentOp,Database	admmgmt: currentOp(db: Database; opt = bson()): Future[BsonDocument]	
killOp	anonimongo/dbops/admmgmt.html#killOp,Database,int32	admmgmt: killOp(db: Database; opid: int32): Future[(bool, string)]	
killCursor	anonimongo/dbops/admmgmt.html#killCursor,Database,string,seq[T][int]	admmgmt: killCursor(db: Database; collname: string; cursorIds: seq[int]): Future[BsonDocument]	
