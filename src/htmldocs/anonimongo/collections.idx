Collection Methods	anonimongo/collections.html#collection-methods	 Collection Methods	
one	anonimongo/collections.html#one,Query	collections: one(q: Query): Future[BsonDocument]	
all	anonimongo/collections.html#all,Query	collections: all(q: Query): Future[seq[BsonDocument]]	
items	anonimongo/collections.html#items.i,Cursor	collections: items(cur: Cursor): BsonDocument	
iter	anonimongo/collections.html#iter,Query	collections: iter(q: Query): Future[Cursor]	
find	anonimongo/collections.html#find,Collection	collections: find(c: Collection; query = bson(); projection = bsonNull()): Query	
findOne	anonimongo/collections.html#findOne,Collection	collections: findOne(c: Collection; query = bson(); projection = bsonNull(); sort = bsonNull()): Future[\n    BsonDocument]	
findAll	anonimongo/collections.html#findAll,Collection	collections: findAll(c: Collection; query = bson(); projection = bsonNull(); sort = bsonNull()): Future[\n    seq[BsonDocument]]	
findIter	anonimongo/collections.html#findIter,Collection	collections: findIter(c: Collection; query = bson(); projection = bsonNull(); sort = bsonNull()): Future[\n    Cursor]	
findAndModify	anonimongo/collections.html#findAndModify,Collection,seq[T][BsonDocument]	collections: findAndModify(c: Collection; query = bson(); sort = bsonNull(); remove = false;\n              update = bsonNull(); `new` = false; fields = bsonNull(); upsert = false;\n              bypass = false; wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]): Future[BsonDocument]	
update	anonimongo/collections.html#update,Collection	collections: update(c: Collection; query = bson(); updates = bsonNull(); opt = bson()): Future[\n    (bool, int)]	
remove	anonimongo/collections.html#remove,Collection,BsonDocument	collections: remove(c: Collection; query: BsonDocument; justone = false): Future[(bool, int)]	
remove	anonimongo/collections.html#remove,Collection,BsonDocument,BsonDocument	collections: remove(c: Collection; query, opt: BsonDocument): Future[(bool, int)]	
insert	anonimongo/collections.html#insert,Collection,seq[T][BsonDocument]	collections: insert(c: Collection; docs: seq[BsonDocument]; opt = bson()): Future[(bool, int)]	
drop	anonimongo/collections.html#drop,Collection	collections: drop(c: Collection; wt = bsonNull()): Future[(bool, string)]	
count	anonimongo/collections.html#count,Collection	collections: count(c: Collection; query = bson(); opt = bson()): Future[int]	
createIndex	anonimongo/collections.html#createIndex,Collection,BsonDocument	collections: createIndex(c: Collection; key: BsonDocument; opt = bson()): Future[(bool, string)]	
`distinct`	anonimongo/collections.html#distinct,Collection,string	collections: `distinct`(c: Collection; field: string; query = bson(); opt = bson()): Future[\n    seq[BsonBase]]	
dropIndex	anonimongo/collections.html#dropIndex,Collection,BsonBase	collections: dropIndex(c: Collection; indexes: BsonBase): Future[(bool, string)]	
dropIndexes	anonimongo/collections.html#dropIndexes,Collection,seq[T][string]	collections: dropIndexes(c: Collection; indexes: seq[string]): Future[(bool, string)]	
